from itertools import combinations

def isHubo(rels, idxs):
    #input: 릴레이션배열, 후보키인지 판정할 키들의 인덱스
    arr = []
    for rel in rels:
        #후보키 쌍을 묶어놓은 리스트
        #ex: 입출력 예에서, idxs = (0, 1, 2)일 경우, ["100", "ryan", "music"]이 후보키인지 확인
        temp = []
        for idx in idxs:
            temp.append(rel[idx])
        
        if temp in arr:
            return False
        else:
            arr.append(temp)
        
    return True
    

def solution(relation):
    answer = 0
    
    idxs = []
    for i in range(len(relation[0])):
        idxs.append(i)
        
    #완전탐색 사용 예정
    #isHubo함수 돌려서 True가 나온것들을 리스트에 따로 담고, 부분집합을 포함하는 것들을 쳐낸다.
    hubos = []
    for i in range(len(relation[0]) + 1):
        combs = combinations(idxs, i)
        for comb in combs:
            #특정 인덱스의 조합이 후보키를 만족할경우
            if isHubo(relation, comb) == True:
                #최소 조합이 아닐 경우(ex 이미 0이 후보키라면, (0,1)은 후보키가 될 수 없음)
                
                supersetFlag = 0
                for hubo in hubos:
                    #print(hubo, comb)
                    if set(comb).issuperset(set(hubo)):
                        supersetFlag = 1
                #print(supersetFlag)
                if supersetFlag == 0:
                    hubos.append(comb)
            else:
                continue
    
    answer = len(hubos)
    
        
    
    return answer
